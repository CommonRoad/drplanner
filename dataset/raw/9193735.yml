input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         # used schema from greedy best search and adapted \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             time = self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             pos_dis = self.calc_euclidean_distance(node_current) \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 time = self.calc_euclidean_distance(current_node=node_current) / velocity \n         if not hasattr(self.planningProblem.goal.state_list[0], 'position'): \n             pos_dis = 0 \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                            self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             vel_dif = abs(node_current.list_paths[-1][-1].velocity - v_mean_goal) \n         else: \n             vel_dif = 0 \n         if hasattr(self.planningProblem.goal.state_list[0], 'orientation'): \n             ori_mean_goal = (self.planningProblem.goal.state_list[0].orientation.start + \n                            self.planningProblem.goal.state_list[0].orientation.end) / 2 \n             ori_dif = abs(node_current.list_paths[-1][-1].orientation - ori_mean_goal) \n         else: \n             ori_dif = 0 \n         weights = np.zeros(4) \n         weights[0] = 1 \n         weights[1] = 0.6 \n         weights[2] = 0.4 \n         weights[3] = 0.4 \n         cost = weights[0] * time +  \n                weights[1] * pos_dis +  \n                weights[2] * vel_dif +  \n                weights[3] * ori_dif \n         if cost < 0: \n             cost = 0 \n         return cost \n "
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
    diagnosis: Zero velocity handling
    prescription: Don't return infinity if velocity is near zero
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         # used schema from greedy best search and adapted \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         if self.position_desired is None: \n             time = self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             pos_dis = self.calc_euclidean_distance(node_current) \n             time = self.calc_euclidean_distance(current_node=node_current) / velocity \n         if not hasattr(self.planningProblem.goal.state_list[0], 'position'): \n             pos_dis = 0 \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                            self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             vel_dif = abs(node_current.list_paths[-1][-1].velocity - v_mean_goal) \n         else: \n             vel_dif = 0 \n         if hasattr(self.planningProblem.goal.state_list[0], 'orientation'): \n             ori_mean_goal = (self.planningProblem.goal.state_list[0].orientation.start + \n                              self.planningProblem.goal.state_list[0].orientation.end) / 2 \n             ori_dif = abs(node_current.list_paths[-1][-1].orientation - ori_mean_goal) \n         else: \n             ori_dif = 0 \n         path_eff = self.calc_path_efficiency(node_current.list_paths[-1]) \n         weights = np.zeros(4) \n         weights[0] = 1 \n         weights[1] = 0.6 \n         weights[2] = 0.4 \n         weights[3] = 0.4 \n         cost = weights[0] * time + weights[1] * pos_dis + weights[2] * vel_dif + weights[3] * ori_dif - 0.2*path_eff \n         if cost < 0: \n             cost = 0 \n         return cost"
