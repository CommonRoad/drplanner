input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         a = 0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 a = self.calc_euclidean_distance(current_node=node_current) / velocity \n         # a sample heuristic function from a previous random student \n         path_last = node_current.list_paths[-1] \n         distStartState = self.calc_heuristic_distance(path_last[0]) \n         distLastState = self.calc_heuristic_distance(path_last[-1]) \n         if distLastState is None: \n             return np.inf \n         if distStartState < distLastState: \n             return np.inf \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         if cost_lanelet is None or final_lanelet_id[0] is None: \n             return np.inf \n         self.calc_path_efficiency(path_last) \n         self.num_obstacles_in_lanelet_at_time_step(path_last[-1].time_step, final_lanelet_id[0]) \n         self.is_goal_in_lane(final_lanelet_id[0]) \n         if self.dict_lanelets_costs[final_lanelet_id[0]] == -1: \n             return np.inf \n         factor = 1 \n         if self.dict_lanelets_costs[final_lanelet_id[0]] > self.dict_lanelets_costs[start_lanelet_id[0]]: \n             return np.inf \n         if self.dict_lanelets_costs[final_lanelet_id[0]] < self.dict_lanelets_costs[start_lanelet_id[0]]: \n             factor = factor * 0.1 \n         angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n         orientationToGoalDiff = self.calc_orientation_diff(angleToGoal, path_last[-1].orientation) \n         if final_lanelet_id[0] in self.list_ids_lanelets_goal: \n             factor = factor * 0.07 \n         pathLength = self.calc_travelled_distance(path_last) \n         cost_time = self.calc_time_cost(path_last) \n         weights = np.zeros(7) \n         if distLastState < 0.5: \n             factor = factor * 0.00001 \n         # elif math.pi - abs(abs(laneletOrientationAtPosition - path[-1].orientation) \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                            self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             dist_vel = abs(path_last[-1].velocity - v_mean_goal) \n         else: \n             dist_vel = 0 \n         weights[0] = 0.1 \n         weights[1] = 0 \n         weights[2] = 0 \n         weights[3] = 0.1 \n         weights[4] = 0 \n         weights[5] = 0.1 \n         weights[6] = 1.5 \n         cost = weights[0] * (cost_lanelet / len(path_last)) + weights[1] * abs(orientationToGoalDiff) + weights[3] * cost_time + weights[2] * distLastState + weights[4] * (100 - pathLength) + weights[5] * dist_vel + weights[6] * a \n         if cost < 0: \n             cost = 0 \n         return cost"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
  - diagnosis: Neglect path efficiency
    prescription: Incorporate path efficiency into cost function
  - diagnosis: No normalized orientation difference
    prescription: Normalize orientation difference
  - diagnosis: Ignore full goal time interval
    prescription: Incorporate full goal time interval instead of only the start
  - diagnosis: Zero heuristic for goal state
    prescription: Make sure to return a value enabling to evaluate taken path
  - diagnosis: Inefficient weighting
    prescription: Adjust weights for relevance
  - diagnosis: Incorrect usage for goal state check
    prescription: Adjust check for velocity goal state to actually work
  - diagnosis: Abort too early
    prescription: Don't return infinity too quickly e.g. for velocity close to zero
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         state = path_last[-1] \n         path_efficiency = self.calc_path_efficiency(path_last) \n         if self.position_desired is None: \n             time_diff = 0 \n             if state.time_step not in self.time_desired: \n                 time_diff = abs(sum(self.time_desired) / 2 - state.time_step) \n             return time_diff + 5*(1/path_efficiency) \n         velocity = state.velocity \n         a = self.calc_euclidean_distance(current_node=node_current) / velocity \n         # a sample heuristic function from a previous random student \n         distLastState = self.calc_heuristic_distance(path_last[-1], 5) \n         if distLastState is None: \n             return np.inf \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         if cost_lanelet is None or final_lanelet_id[0] is None: \n             return np.inf \n         if self.dict_lanelets_costs[final_lanelet_id[0]] == -1: \n             return np.inf \n         angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n         orientationToGoalDiff = self.calc_orientation_diff(angleToGoal, path_last[-1].orientation) \n         orientationToGoalDiff = (orientationToGoalDiff + np.pi) % (2 * np.pi) - np.pi \n         pathLength = self.calc_travelled_distance(path_last) \n         cost_time = self.calc_time_cost(path_last) \n         weights = np.zeros(8) \n         if velocity not in self.velocity_desired: \n             v_mean_goal = sum(self.velocity_desired)/2 \n             dist_vel = abs(state.velocity - v_mean_goal) \n         else: \n             dist_vel = 0 \n         weights[0] = 0.5 \n         weights[1] = 10 \n         weights[2] = 3 \n         weights[3] = 2 \n         weights[4] = 0.8 \n         weights[5] = 0.3 \n         weights[6] = 0.2 \n         weights[7] = 5 \n         cost = weights[0] * (cost_lanelet / len(path_last)) + weights[1] * abs(orientationToGoalDiff) + weights[3] * cost_time + weights[2] * distLastState + weights[4] * (pathLength) + weights[5] * dist_vel + weights[6] * a + weights[7] * (1/path_efficiency) \n         if cost < 0: \n             cost = 0 \n         return cost"
