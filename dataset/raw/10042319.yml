input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return self.calc_euclidean_distance(current_node=node_current) / velocity"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
  - diagnosis: Neglect path efficiency
    prescription: Include path efficiency into cost function
  - diagnosis: Neglect steer angle cost
    prescription: Include steer angle cost into cost function
  - diagnosis: Neglect orientation difference
    prescription: Include orientation difference into cost function
  - diagnosis: Neglect steer velocity cost
    prescription: Include steer velocity cost into cost function
  - diagnosis: Zero heuristic for goal
    prescription: Return value enabling to evaluate taken path
  - diagnosis: Zero velocity handling
    prescription: Don't return infinity if velocity is close to zero
  - diagnosis: Mixture of independent factors
    prescription: Additionally include distance to goal independent of velocity
  - diagnosis: Ignoring full time interval
    prescription: Take full interval into account for time difference calculation instead of only start
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path = node_current.list_paths[-1] \n         state = path[-1] \n         path_efficiency = self.calc_path_efficiency(path) \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 10*(1/path_efficiency) \n         if self.position_desired is None: \n             time_diff = 0 \n             if state.time_step not in self.time_desired: \n                 time_diff = abs(sum(self.time_desired)/2 - state.time_step) \n             return time_diff + 10*(1/path_efficiency) \n         else: \n             distance = self.calc_heuristic_distance(state, distance_type=1) \n             steer_vel_cost = self.calc_steering_velocity_cost(path) \n             steer_angle_cost = self.calc_steering_angle_cost(path) \n             orientation_difference = self.calc_orientation_diff(self.calc_angle_to_goal(state), state.orientation) \n             orientation_difference = (orientation_difference + np.pi) % (2 * np.pi) - np.pi \n             return distance/state.velocity + 10*orientation_difference + steer_angle_cost + steer_vel_cost + 10*(1/path_efficiency) + 3*distance"
