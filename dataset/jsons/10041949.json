{
    "input": {
        "heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return self.calc_euclidean_distance(current_node=node_current) / velocity",
        "motion_primitives": "V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml"
    },
    "output": {
        "summary": {
            "diagnosis": "Neglect of travelled distance",
            "prescription": "Include travelled distance into cost function"
        },
        "improved_heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         state = node_current.list_paths[-1][-1] \n         path = node_current.list_paths[-1] \n         path_efficiency = self.calc_path_efficiency(path) \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return 2*(self.time_desired.start - node_current.list_paths[-1][-1].time_step) - path_efficiency \n         else: \n             travelled_distance = self.calc_travelled_distance(path) \n             steering_cost = self.calc_steering_angle_cost(path) \n             time_cost = self.calc_time_cost(path) \n             distance = self.calc_euclidean_distance(current_node=node_current) \n             orientation = state.orientation \n             velocity = node_current.list_paths[-1][-1].velocity \n             orientation_diff = 0 \n             if orientation not in self.orientation_desired: \n                 orientation_diff = abs(self.calc_orientation_diff(self.calc_angle_to_goal(state), orientation)) \n                 orientation_diff = (orientation_diff + np.pi) % (2 * np.pi) - np.pi \n             velocity_diff = 0 \n             if velocity not in self.velocity_desired: \n                 velocity_diff = abs(sum(self.velocity_desired)/2 - velocity_diff) \n             return 5*distance + 1.5*travelled_distance + 0.4*steering_cost + 0.5*velocity_diff + 1.5*orientation_diff - 3.5*path_efficiency + 0.2*time_cost"
    }
}