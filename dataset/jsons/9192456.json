{
    "input": {
        "heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 x =len(node_current.list_paths[-1]) \n                 #return np.inf \n             else: \n                 x = 0 \n             dist_goal = self.calc_euclidean_distance(node_current) \n             efficiency_traj = self.calc_path_efficiency(node_current.list_paths[-1]) \n             total = 2*dist_goal + 2*efficiency_traj+ 3*x \n             return total",
        "motion_primitives": "V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml"
    },
    "output": {
        "summary": {
            "diagnosis": "Cost calculation uses arbitrary weights",
            "prescription": "Adapt cost function weights to relevance"
        },
        "improved_heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 x =len(node_current.list_paths[-1]) \n                 #return np.inf \n             else: \n                 x = 0 \n             dist_goal = self.calc_euclidean_distance(node_current) \n             or_diff = abs(self.calc_angle_to_goal(node_current.list_paths[-1][-1])) \n             efficiency_traj = self.calc_path_efficiency(node_current.list_paths[-1]) \n             #time_diff = self.calc_time_cost(node_current.list_paths[-1]) \n             #nydist = self.manhattan_distance() \n             if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n                 v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                                 self.planningProblem.goal.state_list[0].velocity.end) / 2 \n                 dist_vel = abs(velocity - v_mean_goal) \n             else: \n                 dist_vel = 0 \n                 #total = 1*resttime + 0.25*or_diff + 0.25*time_diff + 0.9*efficiency_traj #+ 10* dist_goal \n             total = 5*dist_goal + 2.5*dist_vel + 1.8*or_diff + 1*efficiency_traj+ 3*x \n             return total"
    }
}