{
    "input": {
        "heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - path_last[-1].time_step \n         #cost lanelet \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         if cost_lanelet is None or final_lanelet_id[0] is None: \n             return np.inf \n         else: \n             pathEffic = self.calc_path_efficiency(path_last) \n             velocity = path_last[-1].velocity \n             return ((self.calc_euclidean_distance(current_node=node_current)) / (1.3*velocity)) * (1/pathEffic)**4",
        "motion_primitives": "V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml"
    },
    "output": {
        "summary": {
            "diagnosis": "Mixture of independent factors",
            "prescription": "Include velocity and position independent from each other"
        },
        "improved_heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         if self.position_desired is None: \n             return self.time_desired.start - path_last[-1].time_step \n         #cost lanelet \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         if cost_lanelet is None or final_lanelet_id[0] is None: \n             return np.inf \n         pathEffic = self.calc_path_efficiency(path_last) \n         if np.isclose(pathEffic, 0): \n             return np.inf \n         velocity = path_last[-1].velocity \n         velocity_diff = 0 \n         if velocity not in self.velocity_desired: \n             velocity_diff = abs(sum(self.velocity_desired)/2 - velocity) \n         orientation = path_last[-1].velocity \n         orientation_diff = 0 \n         if orientation not in self.orientation_desired: \n             orientation_diff = self.calc_orientation_diff(self.calc_angle_to_goal(path_last[-1]), orientation) \n             orientation_diff = (orientation_diff + np.pi) % (2 * np.pi) - np.pi \n         travelled_distance = self.calc_travelled_distance(path_last) \n         steering_cost = self.calc_steering_angle_cost(path_last) \n         return (3*self.calc_euclidean_distance(current_node=node_current) + 0.3*velocity_diff + 0.8*orientation_diff + 0.8*travelled_distance + 0.3*steering_cost) * (1/pathEffic)**2"
    }
}