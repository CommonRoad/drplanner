input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             path_last = node_current.list_paths[-1] \n             angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n             orientationToGoalDiff = self.calc_orientation_diff(angleToGoal, path_last[-1].orientation) \n             distanceToGoal = self.calc_euclidean_distance(current_node=node_current) \n             distanceAndVelocity = distanceToGoal / velocity \n             return distanceAndVelocity + (abs(orientationToGoalDiff)/distanceToGoal) + distanceToGoal * 0.5 \n             "
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
    diagnosis: Potentially unused factors
    prescription: Use orientation difference only if part of goal state
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             path_last = node_current.list_paths[-1] \n             if hasattr(self.planningProblem.goal.state_list, 'orientation'): \n                 angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n                 orientationToGoalDiff = self.calc_orientation_diff(angleToGoal, path_last[-1].orientation) \n             else: \n                 orientationToGoalDiff = 0 \n             distanceToGoal = self.calc_euclidean_distance(current_node=node_current) \n             distanceAndVelocity = distanceToGoal / velocity \n             path_efficiency = 1 - 0.2*self.calc_path_efficiency(path_last) \n             return (0.5*distanceAndVelocity + (abs(orientationToGoalDiff) / distanceToGoal) + 2*distanceToGoal)*path_efficiency \n "
