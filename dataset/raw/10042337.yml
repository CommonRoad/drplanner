input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             path_current = node_current.list_paths[-1] \n             velocity = node_current.list_paths[-1][-1].velocity \n             cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_current) \n             #dist_closest_obst = self.calc_dist_to_closest_obstacle(final_lanelet_id, node_current.position, \n             #                                                       node_current.list_paths[-1].time_step) \n             #dist_orientation = self.calc_angle_to_goal(node_current) \n             path_efficiency = self.calc_path_efficiency(path_current) \n             heuristic_value = 3*self.calc_euclidean_distance(current_node=node_current) + 0.5*path_efficiency \n             return heuristic_value"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
  - diagnosis: Zero heuristic for goal
    prescription: Return factor to evaluate taken path
  - diagnosis: Ignored cost lanelet
    prescription: Include cost lanelet if rational
  - diagnosis: Incorrect usage of path efficiency
    prescription: Higher path efficiency indicates a more efficient path and should thus result in a lower heuristic
  - diagnosis: Neglect orientation difference
    prescription: Include orientation difference into cost function
  - diagnosis: Neglect time cost
    prescription: Include time cost into cost function
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path = node_current.list_paths[-1] \n         state = path[-1] \n         path_efficiency = self.calc_path_efficiency(path) \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 2*(1/path_efficiency) \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step + 2*(1/path_efficiency) \n         else: \n             path_current = node_current.list_paths[-1] \n             velocity = node_current.list_paths[-1][-1].velocity \n             cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_current) \n             if cost_lanelet is None or final_lanelet_id is None: \n                 return np.inf \n             # dist_closest_obst = self.calc_dist_to_closest_obstacle(final_lanelet_id, node_current.position, \n             #                                                       node_current.list_paths[-1].time_step) \n             dist_orientation = self.calc_orientation_diff(self.calc_angle_to_goal(state), state.orientation) \n             dist_orientation = (dist_orientation + np.pi) % (2 * np.pi) - np.pi \n             cost_time = self.calc_time_cost(path) \n             path_efficiency = self.calc_path_efficiency(path_current) \n             heuristic_value = 2*self.calc_euclidean_distance(current_node=node_current) + 7*1/path_efficiency + cost_lanelet + 10*dist_orientation + 2*cost_time \n             return heuristic_value"
