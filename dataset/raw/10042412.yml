input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         self.calc_distance_to_nearest_point \n         path_last = node_current.list_paths[-1] \n         distStartState = self.calc_heuristic_distance(path_last[0]) \n         distLastState = self.calc_heuristic_distance(path_last[-1]) \n         if distLastState is None: \n             return np.inf \n         if distStartState < distLastState: \n             return np.inf \n         return super().heuristic_function(node_current=node_current)"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
  - diagnosis: Usage of super() function
    prescription: Don't use function from hereditary class
  - diagnosis: Don't check if start distance is smaller than last distance
    prescription: If no position given, both are 0, thus remove
  - diagnosis: Neglect of path efficiency
    prescription: Incorporate path efficiency into cost function
  - diagnosis: Neglect of time cost
    prescription: Incorporate time cost into cost function
  - diagnosis: Neglect of orientation difference
    prescription: Incorporate orientation difference into cost function
  - diagnosis: Neglect of velocity difference
    prescription: Incorporate velocity difference into cost function
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         state = path_last[-1] \n         distStartState = self.calc_heuristic_distance(path_last[0]) \n         distLastState = self.calc_heuristic_distance(path_last[-1]) \n         path_efficiency = self.calc_path_efficiency(path_last) \n         if self.position_desired is None: \n             time_diff = 0 \n             if state.time_step not in self.time_desired: \n                 time_diff = abs(sum(self.time_desired) / 2 - state.time_step) \n             return time_diff + 10*(1/path_efficiency) \n         distance = self.calc_heuristic_distance(state, distance_type=3) \n         time_cost = self.calc_time_cost(path_last) \n         vel_diff = 0 \n         if state.velocity not in self.velocity_desired: \n             vel_diff = abs(sum(self.velocity_desired) / 2 - state.velocity) \n         orientation_difference = self.calc_orientation_diff(self.calc_angle_to_goal(state), state.orientation) \n         orientation_difference = (orientation_difference + np.pi) % (2 * np.pi) - np.pi \n         return 3*distance + time_cost + 10*(1/path_efficiency) + 15*orientation_difference + 0.2*vel_diff"
