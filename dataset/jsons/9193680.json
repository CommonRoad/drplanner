{
    "input": {
        "heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 cost = 1 \n                 path_last = node_current.list_paths[-1] \n                 cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n                 if start_lanelet_id != None: \n                     if self.num_obstacles_in_lanelet_at_time_step(path_last[-1].time_step, final_lanelet_id[0]) > 0: \n                         cost += 0.3 \n                     if self.is_goal_in_lane(final_lanelet_id[0]) == False: \n                         cost += 0.3 \n                 dist = self.calc_euclidean_distance(current_node=node_current) \n                 return (self.calc_euclidean_distance(current_node=node_current) / velocity) * cost + dist \n ",
        "motion_primitives": "V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml"
    },
    "output": {
        "summary": {
            "diagnosis": "Cost calculation uses arbitrary weights",
            "prescription": "Adapt weighting for relevance"
        },
        "improved_heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         time_diff = self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         if self.position_desired is None: \n             return time_diff \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             cost = 1 \n             path_last = node_current.list_paths[-1] \n             cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n             if start_lanelet_id != None: \n                 cost += self.num_obstacles_in_lanelet_at_time_step(path_last[-1].time_step, final_lanelet_id[0])/20 \n             path_efficiency = self.calc_path_efficiency(path_last) \n             if path_efficiency is not np.inf: \n                 cost -= 0.1*path_efficiency \n             if hasattr(self.planningProblem.goal.state_list, 'orientation'): \n                 orientationToGoalDiff = min( \n                     abs(self.calc_orientation_diff(self.orientation_desired.start, path_last[-1].orientation)), \n                     abs(self.calc_orientation_diff(self.orientation_desired.end, path_last[-1].orientation))) \n             else: \n                 orientationToGoalDiff = 0 \n             dist = self.calc_euclidean_distance(current_node=node_current) \n             current_time_to_goal = dist/velocity \n             vel_diff = 0 \n             if velocity not in self.velocity_desired: \n                 vel_diff = abs(self.velocity_desired.start - velocity) \n             return (2*dist + 0.2*vel_diff + abs(orientationToGoalDiff)/dist + 0.5*current_time_to_goal) * cost"
    }
}