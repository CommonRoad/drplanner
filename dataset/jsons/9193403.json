{
    "input": {
        "heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             time_to_goal = self.time_desired.start - node_current.list_paths[-1][-1].time_step \n             distance_to_goal = 0.0 \n             steering_angle_cost = 0.0 \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             distance_to_goal = self.calc_euclidean_distance(current_node=node_current)  \n             steering_angle_cost = 0.0 \n             if np.isclose(velocity, 0): \n                 time_to_goal = np.inf \n             else: \n                 time_to_goal = self.calc_euclidean_distance(current_node=node_current) / velocity \n         if self.orientation_desired is None: \n             orientation_diff_to_goal = 0 \n         else: \n             orientation_diff_to_goal = abs(self.calc_angle_to_goal(node_current.list_paths[-1][-1])) \n         current_lanelet_id = self.lanelet_network.find_lanelet_by_position([node_current.list_paths[-1][-1].position])[-1][-1] \n         distance_to_obstacle = 1 / self.calc_dist_to_closest_obstacle(current_lanelet_id, node_current.list_paths[-1][-1].position, node_current.list_paths[-1][-1].time_step) \n         time_difference_to_goal = abs(self.time_desired.start + (self.time_desired.end - self.time_desired.start) / 2 - node_current.list_paths[-1][-1].time_step) \n         velocity_difference_to_goal = abs(self.velocity_desired.start + (self.velocity_desired.end - self.velocity_desired.start) / 2 - node_current.list_paths[-1][-1].velocity) \n         if math.isinf(velocity_difference_to_goal): \n             velocity_difference_to_goal = 0.0 \n         if math.isinf(time_difference_to_goal): \n             time_difference_to_goal = 0.0 \n         cost = 100 * time_to_goal + 200 * distance_to_goal + 50 * steering_angle_cost + 20 * velocity_difference_to_goal + 50 * orientation_diff_to_goal + 50 * time_difference_to_goal + 40 * distance_to_obstacle \n         if self.list_ids_lanelets_goal is not None: \n             if not self.is_goal_in_lane(current_lanelet_id): \n                 1.2 * cost \n         current_lanelet = self.lanelet_network.find_lanelet_by_id(current_lanelet_id) \n         if self.scenario.obstacles: \n             obstacles = self.get_obstacles(current_lanelet, node_current.list_paths[-1][-1].time_step) \n             cost = (len(obstacles) / len(self.scenario.obstacles) + 1) * cost \n         return cost \n ",
        "motion_primitives": "V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml"
    },
    "output": {
        "summary": {
            "diagnosis": "Neglect travelled distance",
            "prescription": "Include travelled distance into cost calculation"
        },
        "improved_heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path = node_current.list_paths[-1] \n         state = node_current.list_paths[-1][-1] \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             time_to_goal = self.time_desired.start - node_current.list_paths[-1][-1].time_step \n             distance_to_goal = 0.0 \n             return time_to_goal \n         else: \n             distance_to_goal = self.calc_euclidean_distance(current_node=node_current) \n         if state.orientation not in self.orientation_desired: \n             orientation_diff_to_goal = 0 \n         else: \n             orientation_diff_to_goal = abs(self.calc_orientation_diff(self.calc_angle_to_goal(node_current.list_paths[-1][-1]), state.orientation)) \n         current_lanelet_id = self.lanelet_network.find_lanelet_by_position([node_current.list_paths[-1][-1].position])[-1][-1] \n         distance_to_obstacle = self.calc_dist_to_closest_obstacle(current_lanelet_id, node_current.list_paths[-1][-1].position, node_current.list_paths[-1][-1].time_step) \n         if distance_to_obstacle is not None or distance_to_obstacle is not np.inf or distance_to_obstacle != 0: \n             distance_to_obstacle = 10 / distance_to_obstacle \n         else: \n             distance_to_obstacle = 0 \n         path_efficiency = self.calc_path_efficiency(path) \n         if np.isclose(path_efficiency, 0): \n             return np.inf \n         travelled_dist = self.calc_travelled_distance(path) \n         cost = 2*distance_to_goal + orientation_diff_to_goal + 100 - travelled_dist - 0.5*path_efficiency + 0.1*distance_to_obstacle \n         if self.list_ids_lanelets_goal is not None: \n             if not self.is_goal_in_lane(current_lanelet_id): \n                 cost = 1.1 * cost \n         return cost \n "
    }
}