These are some pre-defined helper methods which you can use with ```self.```:
```acceleration_costs(trajectory: TrajectorySample) -> float```,
```jerk_costs(trajectory: TrajectorySample) -> float```,
```lateral_jerk_costs(trajectory: TrajectorySample) -> float```,
```longitudinal_jerk_costs(trajectory: TrajectorySample) -> float```,
```orientation_offset_costs(trajectory: TrajectorySample) -> float```,
```steering_angle_costs(trajectory: TrajectorySample) -> float```,
```steering_velocity_costs(trajectory: TrajectorySample) -> float```,
```distance_to_reference_path_costs(trajectory: TrajectorySample) -> float```,
```path_length_costs(trajectory: TrajectorySample) -> float```
# desired velocity / desired path length weight should NEVER be zero
```desired_velocity_costs(self, trajectory: TrajectorySample) -> float:```
```desired_path_length_costs(self, trajectory: TrajectorySample) -> float:```

You can also define some custom static helper functions.
You are allowed to use the "np" library and the "simps" function for integration.
To do this, access the following attributes of the trajectory parameter:
```
trajectory.dt # time-step
trajectory.cartesian.x
trajectory.cartesian.y
trajectory.cartesian.theta # orientation
trajectory.cartesian.v # velocity
trajectory.cartesian.a # acceleration
trajectory.cartesian.kappa # curvature
trajectory.cartesian.kappa_dot
```
All of these attributes are of type "np.ndarray" and hold the trajectory values from start time (index = 0) to end time (index = -1)
If you define custom functions, please make sure to only use the allowed attributes, libraries and function!
Here is a short demonstration of what you could do:
```
def acceleration_costs2(trajectory: TrajectorySample) -> float:
    # get acceleration over time
    acceleration = trajectory.cartesian.a
    # exclude the first half of the trajectory to give the vehicle more freedom at the beginning
    midpoint = len(acceleration) // 2
    acceleration = acceleration[midpoint:]
    # square the values to avoid negative numbers
    acceleration_sq = np.square(acceleration)
    # sum them up using numerical integration
    cost = simps(acceleration_sq, dx=trajectory.dt)
    return cost
```
It can then be called inside the cost function code as "self.acceleration_costs2(trajectory)"