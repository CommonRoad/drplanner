input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         # a sample heuristic function from a previous random student \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return self.calc_euclidean_distance(current_node=node_current) / velocity"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
  - diagnosis: Neglect path_efficiency
    prescription: Include path efficiency into cost function
  - diagnosis: Neglect acceleration cost
    prescription: Include acceleration cost into cost function
  - diagnosis: Neglect time_cost
    prescription: Include time cost into cost function
  - diagnosis: Neglect steer_cost
    prescription: Include steer cost into cost function
  - diagnosis: Neglect travelled distance
    prescription: Include travelled distance into cost function
  - diagnosis: Neglect orientation difference
    prescription: Include orientation difference into cost function
  - diagnosis: Neglect velocity difference
    prescription: Include velocity difference into cost function
  - diagnosis: Zero velocity handling
    prescription: Don't return infinity if velocity is close to zero
  - diagnosis: Zero heuristic for reached goal
    prescription: Return cost factors to evaluate taken path
  - diagnosis: Mixture of independent factors
    prescription: Include distance to goal independent of velocity
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path = node_current.list_paths[-1] \n         state = node_current.list_paths[-1][-1] \n         path_efficiency = self.calc_path_efficiency(path) \n         acc_cost = self.calc_acceleration_cost(path) \n         time_cost = self.calc_time_cost(path) \n         steer_cost = self.calc_steering_angle_cost(path) \n         # a sample heuristic function from a previous random student \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 2*(1/path_efficiency) + time_cost + steer_cost + acc_cost \n         if self.position_desired is None: \n             return abs(sum(self.time_desired)/2 - state.time_step) + 2*(1/path_efficiency) + acc_cost + steer_cost \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             travelled_distance = self.calc_travelled_distance(path) \n             vel_diff = 0 \n             if velocity not in self.velocity_desired: \n                 vel_diff = abs(sum(self.velocity_desired)/2 - velocity) \n             orientation_diff = self.calc_orientation_diff(self.calc_angle_to_goal(state), state.orientation) \n             orientation_diff = (orientation_diff + np.pi) % (2 * np.pi) - np.pi \n             return 2* self.calc_euclidean_distance(current_node=node_current) + 0.4*travelled_distance + vel_diff + 10*orientation_diff + 6*(1/path_efficiency) + 2*steer_cost + 2*time_cost"
