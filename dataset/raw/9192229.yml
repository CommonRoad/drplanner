input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         cost = 0 \n         endfactor = 1 \n         path_last = node_current.list_paths[-1] \n         if self.is_collision_free(path_last) == False:  \n             return np.inf \n         if self.position_desired is None: \n             cost = self.time_desired.start - node_current.list_paths[-1][-1].time_step \n             return cost \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         velocity = node_current.list_paths[-1][-1].velocity \n         if np.isclose(velocity, 0): \n             return np.inf \n         distance = self.calc_heuristic_distance(path_last[-1]) \n         #velocity difference \n         vel_diff = 0 \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             vel_goal = (self.planningProblem.goal.state_list[0].velocity.start + self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             vel_diff = abs(velocity - vel_diff) \n         #angle difference  \n         angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n         angle_diff = self.calc_orientation_diff(path_last[-1].orientation,angleToGoal) \n         #time difference \n         cost_time = self.calc_time_cost(path_last) \n         #lane difference \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         if cost_lanelet is None or final_lanelet_id[0] is None: \n             return np.inf \n         if self.is_goal_in_lane(final_lanelet_id[0]):    \n             endfactor -= 0.25 \n         #TODO vehicle should drive in lane parallel to the lane orientation \n         #laneOri = self.calc_lanelet_orientation(final_lanelet_id[0],[node_current.list_paths[-1].x , node_current.list_paths[-1].y]) \n         #laneOri_diff = self.calc_orientation_diff(laneOri,angleToGoal) \n         #obstacles  \n         obs = self.num_obstacles_in_lanelet_at_time_step(path_last[-1].time_step, final_lanelet_id[0])  \n         #trajectory efficiency  \n         efficiency = self.calc_path_efficiency(path_last)    \n         endfactor = endfactor - (efficiency*0.01) \n         #Compute Cost \n         weights = [3, 1.2 , 3.1 , 1 , 4.2] \n         cost = weights[0]*distance + weights[1]*vel_diff + weights[2]*angle_diff + weights[3]*cost_time +weights[4]*obs - velocity #+ laneOri_diff \n         return cost*endfactor \n "
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
    diagnosis: Insufficient weighting for path efficiency
    prescription: Increase path efficiency weight
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         cost = 0 \n         endfactor = 1 \n         path_last = node_current.list_paths[-1] \n         velocity = node_current.list_paths[-1][-1].velocity \n         if self.time_desired.end is not np.inf: \n             time_cost = self.time_desired.start - node_current.list_paths[-1][-1].time_step \n             if len(self.planningProblem.goal.state_list[0].attributes) == 1: \n                 return time_cost ** 2 \n         else: \n             time_cost = 0 \n         if self.velocity_desired.end is not np.inf: \n             vel_goal = (self.velocity_desired.start + self.velocity_desired.end) / 2 \n             vel_cost = abs(velocity - vel_goal) \n         else: \n             vel_cost = 0 \n         if len(path_last) > 1 and not self.is_collision_free(path_last[1:]): \n             return np.inf \n         if np.isclose(velocity, 0): \n             return np.inf \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.05 \n         distance = self.calc_heuristic_distance(path_last[-1]) \n         # angle difference \n         angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n         angle_diff = self.calc_orientation_diff(path_last[-1].orientation, angleToGoal) \n         # time difference \n         cost_time = self.calc_time_cost(path_last) \n         # lane difference \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         if cost_lanelet is None or final_lanelet_id[0] is None: \n             return np.inf \n         if self.is_goal_in_lane(final_lanelet_id[0]): \n             endfactor -= 0.25 \n         # trajectory efficiency \n         efficiency = self.calc_path_efficiency(path_last) \n         endfactor = endfactor - (efficiency * 0.1) \n         # Compute Cost \n         weights = [3, 1.2, 3.1, 1, 5] \n         cost = weights[0] * distance + weights[1] * vel_cost + weights[2] * angle_diff + weights[ \n             3] * cost_time + time_cost * weights[4] \n         return cost * endfactor"
