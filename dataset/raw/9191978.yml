input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return self.calc_euclidean_distance(current_node=node_current)"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
    diagnosis: Zero heuristic for goal
    prescription: Return small positive value if goal is reached
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         state = node_current.list_paths[-1][-1] \n         path = node_current.list_paths[-1] \n         path_efficiency = self.calc_path_efficiency(path) \n         if np.isclose(path_efficiency, 0): \n             return np.inf \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         if self.position_desired is None: \n             return (self.time_desired.start - node_current.list_paths[-1][-1].time_step) \n         else: \n             velocity = state.velocity \n             orientation = state.orientation \n             travelled_distance = self.calc_travelled_distance(path) \n             velocity_difference = 0 \n             if velocity not in self.velocity_desired: \n                 velocity_difference = abs(sum(self.velocity_desired)/2 - velocity) \n             orientation_difference = 0 \n             if orientation not in self.orientation_desired: \n                 orientation_difference = abs(self.calc_orientation_diff(self.calc_angle_to_goal(state), orientation)) \n                 orientation_difference = (orientation_difference + np.pi) % (2 * np.pi) - np.pi \n             return 2*self.calc_euclidean_distance(current_node=node_current) + orientation_difference + velocity_difference - 3*path_efficiency + 0.5*travelled_distance"
