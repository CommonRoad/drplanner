input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         factor = 1 \n         distToObstacle = 100 \n         dist_vel = 30 \n         # if goal is reached use this path \n         if self.reached_goal(path_last): \n             return 0 \n         # if we collide ignore this path \n         if len(path_last) > 1 and not self.is_collision_free(path_last[1:]): \n             return np.inf \n         # we have a time goal: prioritize path that is closest to the start of the goal interval \n         if not (self.time_desired is None): \n             diffToIntervalStart = self.time_desired.start - path_last[-1].time_step \n             if diffToIntervalStart < 0: \n                 factor += -diffToIntervalStart \n             else: \n                 factor *= diffToIntervalStart \n         distLastState = self.calc_heuristic_distance(path_last[-1]) \n         # if we can't reach the goal from the new state \n         if distLastState is None: \n             return np.inf \n         # compare the distances at the last state and state before that \n         if len(path_last) >= 2: \n             distBeforeState = self.calc_heuristic_distance(path_last[-2]) \n             # heavily discourage getting farther from goal \n             if distBeforeState < distLastState: \n                 factor *= 8 \n         # try to stay in the center of the lanelet \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         # discourage path if cost of lanelet cannot be determined \n         if cost_lanelet is None: \n             cost_lanelet = 0 \n             factor *= 5 \n         if not (final_lanelet_id is None or start_lanelet_id is None): \n             if self.dict_lanelets_costs[final_lanelet_id[0]] == -1: \n                 return np.inf \n             if self.dict_lanelets_costs[final_lanelet_id[0]] > self.dict_lanelets_costs[start_lanelet_id[0]]: \n                 factor *= 2 \n             if self.dict_lanelets_costs[final_lanelet_id[0]] < self.dict_lanelets_costs[start_lanelet_id[0]]: \n                 factor *= 0.3 \n         if not (final_lanelet_id is None): \n             distToObstacle = self.calc_dist_to_closest_obstacle(final_lanelet_id[0], path_last[-1].position, path_last[-1].time_step) \n             # prioritize a change of orientation if obstacle in lanelet is near (only if no adjacent obstacles) \n             if distToObstacle < 5 and len(path_last) >= 2: \n                 shouldChange = True \n                 adjacentLanes = self.find_adjacent_lanelets_same_direction(self.lanelet_network.find_lanelet_by_id(final_lanelet_id[0])) \n                 # check for adjacent lanes if an obstacle is nearby \n                 for lane in adjacentLanes: \n                     if self.calc_dist_to_closest_obstacle(lane, path_last[-1].position, path_last[-1].time_step) < 5: \n                         shouldChange = False \n                 if shouldChange: \n                     factor /= (1 + 8 * abs(self.calc_orientation_diff(path_last[-2].orientation, path_last[-1].orientation))) \n         angleToGoal = self.calc_angle_to_goal(path_last[-1])   \n         pathLength = self.calc_travelled_distance(path_last) \n         cost_time = self.calc_time_cost(path_last) \n         # prioritize speeds near 20 if not near goal, slow down to 5 while obstacle is nearby \n         vel_goal = 20 \n         if distLastState < 10 and hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             vel_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                     self.planningProblem.goal.state_list[0].velocity.end) / 2 \n         elif distLastState < 3: \n             vel_goal = 1 \n         elif distToObstacle < 5: \n             vel_goal = 4 \n         dist_vel = abs(vel_goal - path_last[-1].velocity) \n         # how the different components are weighted  \n         weights = [1.5, 1, 2, 0.5, 3] \n         # more priority on the right angle if close to goal \n         if distLastState < 10: \n             weights[1] += 0.5 \n             # even more so if it is in the same lane \n             if not (final_lanelet_id is None) and self.is_goal_in_lane(final_lanelet_id[0]): \n                 weights[1] += 1 \n         cost = weights[0] * cost_lanelet + weights[1] * abs(angleToGoal) + weights[2] * cost_time + weights[3] * (100 - pathLength) + weights[4] * dist_vel \n         return max(cost, 0) * factor"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
    diagnosis: Cost calculation uses arbitrary weights
    prescription: Adapt cost function weights for relevance and balance
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         factor = 1 \n         # if goal is reached use this path \n         if self.reached_goal(path_last): \n             return 0 \n         # if we collide ignore this path \n         if len(path_last) > 1 and not self.is_collision_free(path_last[1:]): \n             return np.inf \n         # we have a time goal: prioritize path that is closest to the start of the goal interval \n         if self.time_desired.end != np.inf: \n             diffToIntervalStart = abs(self.time_desired.start - path_last[-1].time_step) \n             factor += diffToIntervalStart \n         distLastState = 0 \n         if self.position_desired is not None: \n             distLastState = self.calc_heuristic_distance(path_last[-1]) \n             # if we can't reach the goal from the new state \n             if distLastState is None: \n                 return np.inf \n             # compare the distances at the last state and state before that \n             if len(path_last) >= 2: \n                 distBeforeState = self.calc_heuristic_distance(path_last[-2]) \n                 # heavily discourage getting farther from goal \n                 if distBeforeState < distLastState: \n                     factor += (distBeforeState - distLastState)*5 \n         # try to stay in the center of the lanelet \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         # discourage path if cost of lanelet cannot be determined \n         if cost_lanelet is None: \n             cost_lanelet = 0 \n             factor += 50 \n         if not (final_lanelet_id is None or start_lanelet_id is None): \n             if self.dict_lanelets_costs[final_lanelet_id[0]] == -1: \n                 return np.inf \n             if self.dict_lanelets_costs[final_lanelet_id[0]] > self.dict_lanelets_costs[start_lanelet_id[0]]: \n                 factor += self.dict_lanelets_costs[final_lanelet_id[0]] - self.dict_lanelets_costs[start_lanelet_id[0]] \n             if self.dict_lanelets_costs[final_lanelet_id[0]] < self.dict_lanelets_costs[start_lanelet_id[0]]: \n                 factor *= 0.9 \n         if not (final_lanelet_id is None): \n             distToObstacle = self.calc_dist_to_closest_obstacle(final_lanelet_id[0], path_last[-1].position, path_last[-1].time_step) \n             # prioritize a change of orientation if obstacle in lanelet is near (only if no adjacent obstacles) \n             if distToObstacle < 5 and len(path_last) >= 2: # TODO maybe include velocity into this \n                 shouldChange = True \n                 adjacentLanes = self.find_adjacent_lanelets_same_direction(self.lanelet_network.find_lanelet_by_id(final_lanelet_id[0])) \n                 # check for adjacent lanes if an obstacle is nearby \n                 for lane in adjacentLanes: \n                     if self.calc_dist_to_closest_obstacle(lane, path_last[-1].position, path_last[-1].time_step) < 5: \n                         shouldChange = False \n                 if shouldChange: \n                     factor *=1.5 \n         angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n         pathLength = self.calc_travelled_distance(path_last) \n         cost_time = self.calc_time_cost(path_last) \n         # prioritize speeds near 20 if not near goal, slow down to 5 while obstacle is nearby \n         dist_vel = 0 \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             vel_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                     self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             dist_vel = abs(vel_goal - path_last[-1].velocity) \n         # how the different components are weighted \n         weights = [1, 3, 2, 1, 0.5, 2] \n         # more priority on the right angle if close to goal \n         if distLastState < 10: \n             weights[1] += 0.5 \n             # even more so if it is in the same lane \n             if not (final_lanelet_id is None) and self.is_goal_in_lane(final_lanelet_id[0]): \n                 weights[1] += 1 \n         cost = weights[0] * cost_lanelet + weights[1] * abs(angleToGoal) + weights[2] * cost_time + weights[3] * pathLength + weights[4] * dist_vel + weights[5]*distLastState \n         return max(cost, 0) * factor"
