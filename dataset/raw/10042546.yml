input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return self.calc_euclidean_distance(current_node=node_current)"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
  - diagnosis: Zero velocity handling
    prescription: Don't return zero if velocity is close to zero
  - diagnosis: Neglect of orientation difference
    prescription: Include orientation difference into cost function
  - diagnosis: Neglect of path efficiency
    prescription: Include path efficiency into cost function
  - diagnosis: Neglect of time cost
    prescription: Include time cost into cost function
  - diagnosis: Neglect of steering cost
    prescription: Include steering cost into cost function
  - diagnosis: Neglect of velocity difference
    prescription: Include velocity difference into cost function
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path = node_current.list_paths[-1] \n         state = node_current.list_paths[-1][-1] \n         path_efficiency = self.calc_path_efficiency(path) \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step + 10*(path_efficiency) \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             dist = self.calc_euclidean_distance(current_node=node_current) \n             velocity_difference = 0 \n             if velocity not in self.velocity_desired: \n                 velocity_difference = abs(sum(self.velocity_desired)/2 - velocity) \n             orientation_difference = self.calc_orientation_diff(self.calc_angle_to_goal(state), state.orientation) \n             orientation_difference = (orientation_difference + np.pi) % (2 * np.pi) - np.pi \n             steering_cost = self.calc_steering_angle_cost(path) \n             time_cost = self.calc_time_cost(path) \n             return 2*dist + 0.5*velocity_difference + 10*orientation_difference/dist + 0.9*steering_cost + 2*time_cost + 8*(1/path_efficiency)"
