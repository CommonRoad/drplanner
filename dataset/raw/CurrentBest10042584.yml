input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         distanceStartState = self.calc_heuristic_distance(path_last[0]) \n         distanceLastState = self.calc_heuristic_distance(path_last[-1]) \n         angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n         orientationToGoalDiff = self.calc_orientation_diff(angleToGoal, path_last[-1].orientation) \n         cost_in_time = self.calc_time_cost(path_last) \n         if distanceLastState is None: \n             return np.inf \n         if distanceStartState < distanceLastState: \n             return np.inf \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n                 v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                            self.planningProblem.goal.state_list[0].velocity.end) / 2 \n                 distance_velocity = abs(path_last[-1].velocity - v_mean_goal) \n             else: \n                 distance_velocity = 0 \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return 0.8 * (self.calc_euclidean_distance(current_node=node_current) / velocity) + 0.05 * (distanceLastState) + 0.025 * (orientationToGoalDiff)+ 0.025 * cost_in_time + 0.1 * distance_velocity"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
  - diagnosis: Neglect of path efficiency
    prescription: Include path efficiency into cost function
  - diagnosis: No normalized orientation difference
    prescription: Normalize orientation difference before usage
  - diagnosis: Mixture of independent factors
    prescription: Include distance to goal independent of velocity
  - diagnosis: Zero velocity handling
    prescription: Don't return zero if velocity is close to zero
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         distanceStartState = self.calc_heuristic_distance(path_last[0]) \n         distanceLastState = self.calc_heuristic_distance(path_last[-1]) \n         angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n         orientationToGoalDiff = self.calc_orientation_diff(angleToGoal, path_last[-1].orientation) \n         orientationToGoalDiff = (orientationToGoalDiff + np.pi) % (2 * np.pi) - np.pi \n         path_efficiency = self.calc_path_efficiency(path_last) \n         cost_in_time = self.calc_time_cost(path_last) \n         if distanceLastState is None: \n             return np.inf \n         if distanceStartState < distanceLastState: \n             return np.inf \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n                 v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                                self.planningProblem.goal.state_list[0].velocity.end) / 2 \n                 distance_velocity = abs(path_last[-1].velocity - v_mean_goal) \n             else: \n                 distance_velocity = 0 \n             return 0.8 * (self.calc_euclidean_distance(current_node=node_current)) + 0.05 * ( \n                 distanceLastState) + 0.025 * ( \n                 orientationToGoalDiff) + 0.025 * cost_in_time + 0.1 * distance_velocity + 0.4*(1/path_efficiency)"
