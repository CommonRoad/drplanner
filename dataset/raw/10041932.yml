input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         distStartState = self.calc_heuristic_distance(path_last[0]) \n         distLastState = self.calc_heuristic_distance(path_last[-1]) \n         if distLastState is None: \n             return np.inf \n         if distStartState < distLastState: \n             return np.inf \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         if cost_lanelet is None or final_lanelet_id[0] is None: \n             return np.inf \n         self.calc_path_efficiency(path_last) \n         self.num_obstacles_in_lanelet_at_time_step(path_last[-1].time_step, final_lanelet_id[0]) \n         self.is_goal_in_lane(final_lanelet_id[0]) \n         if self.dict_lanelets_costs[final_lanelet_id[0]] == -1: \n             return np.inf \n         factor = 1 \n         if self.dict_lanelets_costs[final_lanelet_id[0]] > self.dict_lanelets_costs[start_lanelet_id[0]]: \n             return np.inf \n         if self.dict_lanelets_costs[final_lanelet_id[0]] < self.dict_lanelets_costs[start_lanelet_id[0]]: \n             factor = factor * 0.1 \n         angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n         orientationToGoalDiff = self.calc_orientation_diff(angleToGoal, path_last[-1].orientation) \n         if final_lanelet_id[0] in self.list_ids_lanelets_goal: \n             factor = factor * 0.07 \n         pathLength = self.calc_travelled_distance(path_last) \n         cost_time = self.calc_time_cost(path_last) \n         weights = np.zeros(6) \n         if distLastState < 0.5: \n             factor = factor * 0.0001 \n         # elif math.pi - abs(abs(laneletOrientationAtPosition - path[-1].orientation) \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                            self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             dist_vel = abs(path_last[-1].velocity - v_mean_goal) \n         else: \n             dist_vel = 0 \n         weights[0] = 8.7 \n         weights[1] = 0.01 \n         weights[2] = 0.5 \n         weights[3] = 0.1 \n         weights[4] = 0.05 \n         weights[5] = 1 \n         cost = weights[0] * (cost_lanelet / len(path_last)) +  \n                weights[1] * abs(orientationToGoalDiff) +  \n                weights[3] * cost_time +  \n                weights[2] * distLastState +  \n                weights[4] * (100 - pathLength) +  \n                weights[5] * dist_vel \n         if cost < 0: \n             cost = 0 \n         return cost * factor"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
    diagnosis: Cost calculation uses arbitrary weights
    prescription: Adapt cost calculation weights for relevance
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         state = node_current.list_paths[-1][-1] \n         path_efficiency = self.calc_path_efficiency(path_last) \n         if np.isclose(path_efficiency, 0): \n             return np.inf \n         if self.position_desired is None: \n             return 2*(self.time_desired.start - state.time_step)-path_efficiency \n         distLastState = self.calc_heuristic_distance(path_last[-1]) \n         if distLastState is None: \n             return np.inf \n         cost_lanelet, final_lanelet_id, start_lanelet_id = self.calc_heuristic_lanelet(path_last) \n         if cost_lanelet is None or final_lanelet_id[0] is None: \n             return np.inf \n         num_obstacles = self.num_obstacles_in_lanelet_at_time_step(path_last[-1].time_step, final_lanelet_id[0]) \n         goal_in_lane = self.is_goal_in_lane(final_lanelet_id[0]) \n         factor = 1 \n         orientationToGoalDiff = 0 \n         if state.orientation not in self.orientation_desired: \n             angleToGoal = self.calc_angle_to_goal(path_last[-1]) \n             orientationToGoalDiff = abs(self.calc_orientation_diff(angleToGoal, path_last[-1].orientation)) \n             orientationToGoalDiff = (orientationToGoalDiff + np.pi) % (2 * np.pi) - np.pi \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                            self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             dist_vel = abs(path_last[-1].velocity - v_mean_goal) \n         else: \n             dist_vel = 0 \n         if goal_in_lane: \n             factor = factor * 0.9 \n         pathLength = self.calc_travelled_distance(path_last) \n         cost_time = self.calc_time_cost(path_last) \n         acceleration_cost = self.calc_acceleration_cost(path_last) \n         steering_cost = self.calc_steering_angle_cost(path_last) \n         weights = np.zeros(9) \n         weights[0] = 5 \n         weights[1] = 0.8 \n         weights[2] = 3 \n         weights[3] = 0.5 \n         weights[4] = 0.5 \n         weights[5] = 1 \n         weights[6] = 0.5 \n         weights[7] = 0.5 \n         weights[8] = 2 \n         cost = weights[0] * distLastState +  \n                weights[1] * orientationToGoalDiff +  \n                weights[3] * cost_time +  \n                weights[2] * -path_efficiency +  \n                weights[4] * pathLength +  \n                weights[5] * dist_vel +  weights[6] * acceleration_cost + weights[7]*steering_cost + weights[8]*num_obstacles \n         if cost < 0: \n             cost = 0 \n         return cost * factor"
