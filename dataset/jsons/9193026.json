{
    "input": {
        "heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         velocity = node_current.list_paths[-1][-1].velocity \n         if np.isclose(velocity, 0): \n             return np.inf \n         pos = node_current.list_paths[-1] \n         dist_score = self.calc_euclidean_distance(node_current) \n         efficiency = self.calc_path_efficiency(pos) \n         angle_score = abs(0.05 * self.calc_angle_to_goal(pos[-1])) \n         return dist_score + efficiency + angle_score",
        "motion_primitives": "V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml"
    },
    "output": {
        "summary": {
            "diagnosis": "Cost calculation uses arbitrary weights",
            "prescription": "Adapt cost function weights according to relevance"
        },
        "improved_heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         pos = node_current.list_paths[-1] \n         state = pos[-1] \n         velocity = node_current.list_paths[-1][-1].velocity \n         vel_diff = 0 \n         if velocity not in self.velocity_desired: \n             vel_diff = abs(sum(self.velocity_desired)/2 - velocity) \n         ori_diff = 0 \n         orientation = state.orientation \n         if orientation not in self.orientation_desired: \n             angle = self.calc_angle_to_goal(pos[-1]) \n             ori_diff = self.calc_orientation_diff(angle, orientation) \n         dist_score = self.calc_euclidean_distance(node_current) \n         efficiency = self.calc_path_efficiency(pos) \n         if np.isclose(efficiency, 0): \n             return np.inf \n         travelled_distance = self.calc_travelled_distance(pos) \n         return 2 * dist_score + 0.8*ori_diff + 0.3*vel_diff + 100 - travelled_distance"
    }
}