To calculate the costs, use some of these pre-defined helper methods and turn them into a weighted sum:
```acceleration_costs(trajectory: TrajectorySample) -> float```,
```jerk_costs(trajectory: TrajectorySample) -> float```,
```lateral_jerk_costs(trajectory: TrajectorySample) -> float```,
```longitudinal_jerk_costs(trajectory: TrajectorySample) -> float```,
```orientation_offset_costs(trajectory: TrajectorySample) -> float```,
```steering_angle_costs(trajectory: TrajectorySample) -> float```,
```steering_velocity_costs(trajectory: TrajectorySample) -> float```,
```distance_to_reference_path_costs(trajectory: TrajectorySample) -> float```,
```path_length_costs(trajectory: TrajectorySample) -> float```
```desired_velocity_costs(self, trajectory: TrajectorySample) -> float:```
```desired_path_length_costs(self, trajectory: TrajectorySample) -> float:```
Here is a very simple and short example cost function variant:
def evaluate(self, trajectory: TrajectorySample) -> float:
    cost = 0.0
    cost += 1.0 * self.desired_velocity_costs(trajectory)
    return cost
Now create four different cost functions by introducing more of the helper methods and adjusting their weights. For reference, a good weight should be a number between 1 and 100.