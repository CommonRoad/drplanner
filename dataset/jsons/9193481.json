{
    "input": {
        "heuristic_function": "        time_state = node_current.list_paths[-1][-1].time_step \n         #reached goal \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         #survival mode \n         if self.position_desired is None: \n             return self.time_desired.start - time_state \n         #euclidean distance to goal \n         eucDist_to_goal = self.calc_euclidean_distance(current_node=node_current) \n         return eucDist_to_goal",
        "motion_primitives": "V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml"
    },
    "output": {
        "summary": {
            "diagnosis": "Neglect orientation difference",
            "prescription": "Incorporate orientation difference into cost function if part of goal state"
        },
        "improved_heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path = node_current.list_paths[-1] \n         state = node_current.list_paths[-1][-1] \n         time_state = node_current.list_paths[-1][-1].time_step \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         path_efficiency = self.calc_path_efficiency(path) \n         if np.isclose(path_efficiency, 0): \n             return np.inf \n         #reached goal \n         #survival mode \n         if self.position_desired is None: \n             return abs(self.time_desired.start - time_state) - path_efficiency \n         # orientation difference \n         orientation_difference = 0 \n         if state.orientation not in self.orientation_desired: \n             orientation_difference = abs(self.calc_orientation_diff(self.calc_angle_to_goal(state), state.orientation)) \n             orientation_difference = (orientation_difference + np.pi) % (2 * np.pi) - np.pi \n         #euclidean distance to goal \n         eucDist_to_goal = self.calc_euclidean_distance(current_node=node_current) \n         steering_angle_cost = self.calc_steering_angle_cost(node_current.list_paths[-1]) \n         travelled_distance = self.calc_travelled_distance(path) \n         return 3*eucDist_to_goal + 0.6*orientation_difference + 0.3*steering_angle_cost + 0.3*travelled_distance - 2*path_efficiency"
    }
}