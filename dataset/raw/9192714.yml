input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             steering_angle = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return self.calc_euclidean_distance(current_node=node_current) * abs(steering_angle) / velocity"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
    diagnosis: Mixture of two independent features
    prescription: Don't mix orientation and velocity
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         # Since GBFS was the best provided search algorithm, modifying it would've been faster than coming up with a new algorithm \n         # Hence I added additional weights to the nodes, when the car was supposed to be turn using steering angle and I \n         # ended up with 350 solutions (the website rejects 2 solutions though), which satisfied the requirement for the grade bonus. \n         factor = 1 \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         time_diff = abs(self.time_desired.start - node_current.list_paths[-1][-1].time_step) \n         if self.position_desired is None: \n             return time_diff \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             velocity_diff = 0 \n             if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n                 velocity_diff = abs((self.planningProblem.goal.state_list[0].velocity.start + \n                                 self.planningProblem.goal.state_list[0].velocity.end) / 2 - velocity) \n             steering_angle = node_current.list_paths[-1][-1].orientation \n             orientation_diff = 0 \n             if hasattr(self.planningProblem.goal.state_list[0], 'orientation'): \n                 orientation_diff = abs((self.orientation_desired.start + \n                                 self.orientation_desired.end) / 2 - steering_angle) \n             #if np.isclose(velocity, 0): \n             #    return np.inf \n             path_eff = self.calc_path_efficiency(node_current.list_paths[-1]) \n             if path_eff is not np.inf: \n                 factor -= 0.02*path_eff \n             if factor < 0.1: \n                 print(factor) \n                 factor = 0.5 \n             return factor * (self.calc_euclidean_distance(current_node=node_current) + orientation_diff + velocity_diff + time_diff)"
