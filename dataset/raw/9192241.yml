input:
  heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return self.calc_euclidean_distance(current_node=node_current) / velocity"
  motion_primitives: V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml
output:
  summary:
    diagnosis: Neglect of travelled distance
    prescription: Include travelled distance into cost function
  improved_heuristic_function: "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.5 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             dist = self.calc_euclidean_distance(current_node=node_current) \n             orientation = node_current.list_paths[-1][-1].velocity \n             path_efficiency = self.calc_path_efficiency(node_current.list_paths[-1]) \n             angle_to_goal = self.calc_angle_to_goal(node_current.list_paths[-1][-1]) \n             travelled_dist = self.calc_travelled_distance(node_current.list_paths[-1]) \n             time_to_goal = dist/velocity \n             vel_diff = 0 \n             if velocity not in self.velocity_desired: \n                 vel_diff = abs(sum(self.velocity_desired)/2 - velocity) \n             orientation_diff = 0 \n             if orientation not in self.orientation_desired: \n                 orientation_diff = abs(self.calc_orientation_diff(angle_to_goal, orientation)) \n             if np.isclose(path_efficiency, 0): \n                 return np.inf \n             return 2*dist + time_to_goal + orientation_diff + vel_diff + 100 - travelled_dist - 0.5 * path_efficiency"
