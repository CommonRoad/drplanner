{
    "input": {
        "heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         path_last = node_current.list_paths[-1] \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                            self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             dist_vel = abs(path_last[-1].velocity - v_mean_goal) \n         else: \n             dist_vel = 0 \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             if np.isclose(velocity, 0): \n                 return np.inf \n             else: \n                 return 1.8*self.calc_euclidean_distance(current_node=node_current)+1.2*self.calc_euclidean_distance(current_node=node_current)/velocity",
        "motion_primitives": "V_0.0_20.0_Vstep_4.0_SA_-1.066_1.066_SAstep_0.18_T_0.5_Model_BMW_320i.xml"
    },
    "output": {
        "summary": {
            "diagnosis": "Cost calculation uses arbitrary weights",
            "prescription": "Adjust weights for relevance and balance"
        },
        "improved_heuristic_function": "    def heuristic_function(self, node_current: PriorityNode) -> float: \n         # a sample heuristic function from a previous random student \n         path_last = node_current.list_paths[-1] \n         state = node_current.list_paths[-1][-1] \n         if hasattr(self.planningProblem.goal.state_list[0], 'velocity'): \n             v_mean_goal = (self.planningProblem.goal.state_list[0].velocity.start + \n                            self.planningProblem.goal.state_list[0].velocity.end) / 2 \n             dist_vel = abs(path_last[-1].velocity - v_mean_goal) \n         else: \n             dist_vel = 0 \n         if self.reached_goal(node_current.list_paths[-1]): \n             return 0.0 \n         if self.position_desired is None: \n             return self.time_desired.start - node_current.list_paths[-1][-1].time_step \n         else: \n             velocity = node_current.list_paths[-1][-1].velocity \n             dist = self.calc_euclidean_distance(current_node=node_current) \n             orientation_diff = 0 \n             if state.orientation not in self.orientation_desired: \n                 orientation_diff = self.calc_orientation_diff(self.calc_angle_to_goal(state), state.orientation) \n             path_efficiency = self.calc_path_efficiency(path_last) \n             if np.isclose(path_efficiency, 0): \n                 return np.inf \n             travelled_dist = self.calc_travelled_distance(path_last) \n             return 0.5*dist + 0.2*dist/velocity + 0.2*orientation_diff + 0.1*dist_vel + 50 - travelled_dist - 0.1*path_efficiency"
    }
}